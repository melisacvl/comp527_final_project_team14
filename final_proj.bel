%% COMP 527 Final Project
%% Beluga mechanization for Gödel's system T 
%% Team 14: Tortoise and the Achilles

%% The goal of this tutorial is to study the extension of ordinary logic with natural numbers and recursion over natural numbers.

%%%%%%%%%%%%%%%
%% Questions %%
%%%%%%%%%%%%%%%

%% Do we leave as intrinsically typed formulation? From what I understand, if we left more ambiguous and instead had like a LF of_type then it would be extrinsic

%%%%%%%%%%%%%%%%
%% Objectives %%
%%%%%%%%%%%%%%%%

%% Inherit natural deduction calculus including existence and universal qualifiers
%% Implement the natural numbers (with zero and a successor)
%% Implement primitive recursion in the same way Gödel did  
%% Implement basic arithmetic operations using primitive recursion 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Defining Gödel's System T %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Defining types and terms in Gödel's System T
i : type. 

LF tp : type =
  | nat : tp          % natural number type

  | ⊃ : tp → tp → tp
  | ⊤ : tp
  | ∧   : tp → tp → tp
  | ∨   : tp → tp → tp
  | ¬  : tp → tp
  | ∀  : (i → tp) → tp    
  | ∃  : (i → tp) → tp     
;

--prefix ¬ 10.
--infix ∧ 6 right.
--infix ∨ 5 right.
--infix ⊃ 4 right.
--prefix ∀ 8.
--prefix ∃ 8.

LF tm : tp → type =

  % natural numbers as a recursive type (with zero and a successor)
  | natIl : tm nat        % zero                                  
  | natIr : tm nat → tm nat  % succ    

  % primitive recursion     
  %| natE : tm nat → tm A → tm (tm (nat ⊃ A ⊃ A)) → tm A
  % | natE : tm O -> tm A -> ((tm A -> tm C) -> (tm B -> tm C)) -> tm B 
  | natE : tm O -> tm A -> (tm O -> tm C) -> tm C

  % natural deduction calculus including existence and universal qualifiers
  | ⊃I : (tm A → tm B) → tm (A ⊃ B)
  | ⊃E : tm (A ⊃ B) → tm A → tm B      
  | ¬I : ({p:tp} tm A → tm p) → tm (¬ A)    
  | ¬E : tm (¬ A) → tm A → tm C      
  | ∧I : tm A → tm B → tm  (A ∧ B)    
  | ∧El : tm (A ∧ B) → tm A
  | ∧Er : tm (A ∧ B) → tm B
  | ∨Il : tm A → tm (A ∨ B)
  | ∨Ir : tm B → tm (A ∨ B)
  | ∨E  : tm (A ∨ B) → (tm A → tm C) → (tm B → tm C) → tm C
  | ⊤I : tm ⊤
  | ∀I : ({a:i} tm (A a)) → tm (∀ (\x. A x))     
  | ∀E : {T:i} tm (∀ A) → tm (A T) 
  | ∃I : {T:i} tm (A T) → tm (∃ A)     
  | ∃E : tm (∃ \x. A x) → ({a:i} tm (A a) → tm C) → tm C
;

% Defining addition via primitive recursion:

% This doesn't run. What we want is something like:

%add_nat(a,b)
%base case: a = 0, return b;
%a non-zero --> a= succ(m) so return add_nat(m,succ(b));
%{
rec add_nat : [⊢ tm nat] → [⊢ tm nat] → [⊢ tm nat] =
  fn a b ⇒ case a of
    | [⊢ natIl] ⇒ b
    | [⊢ natIr M] ⇒
    let [⊢ B] = b in
    let [⊢ N] = [⊢ natE M (B ?)] in
    [⊢ natIr N]
;
}%
% Defining addition using Beluga recursion
rec add_nat : [⊢ tm nat] → [⊢ tm nat] → [⊢ tm nat] =
fn a b ⇒ case a of
  | [⊢ natIl] ⇒ b
  | [⊢ natIr M] ⇒
	let [⊢ N] = add_nat [⊢ M] b in
	[⊢ natIr N]
;

rec infinity : [ ⊢ tm (nat ⊃ (nat ⊃ nat))] = [ ⊢ ⊃I \u. (⊃I \v. (natE u v natIr))];

%rec multiply : [ ⊢ ?];

rec qa : [ ⊢ tm (((A ⊃ B) ∧ (A ∨ C)) ⊃ (B ∨ C)) ] = [ ⊢ ⊃I \u. (∨E (∧Er u) (\a. (∨Il (⊃E (∧El u) a))) (\c. (∨Ir c)))];